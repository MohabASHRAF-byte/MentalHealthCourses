using AutoMapper;
using MediatR;
using MentalHealthcare.Application.BunnyServices;
using MentalHealthcare.Application.SystemUsers;
using MentalHealthcare.Domain.Constants;
using MentalHealthcare.Domain.Entities;
using MentalHealthcare.Domain.Exceptions;
using MentalHealthcare.Domain.Repositories;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace MentalHealthcare.Application.Advertisement.Commands.Create;

public class CreateAdvertisementCommandHandler(
    ILogger<CreateAdvertisementCommandHandler> logger,
    IAdvertisementRepository adRepository,
    IConfiguration configuration,
    IMapper mapper,
    IUserContext userContext

) : IRequestHandler<CreateAdvertisementCommand, int>
{
    /// <summary>
    /// Creates a new advertisement and uploads images associated with it.
    /// </summary>
    /// <param name="request">The request containing the details for the advertisement and associated images.</param>
    /// <returns>The ID of the newly created advertisement.</returns>
    /// <response code="200">Returns the advertisement ID after successful creation</response>
    /// <response code="400">If the image size exceeds the allowed limit</response>
    /// <remarks>
    /// /// <summary>
    /// Creates a new advertisement and uploads images associated with it.
    /// </summary>
    /// <param name="request">The request containing the details for the advertisement and associated images.</param>
    /// <returns>The ID of the newly created advertisement.</returns>
    /// <response code="200">Returns the advertisement ID after successful creation</response>
    /// <response code="400">If the image size exceeds the allowed limit</response>
    /// Flow Logic:
    /// <list type="number">
    /// <item>
    /// <description>
    /// Check Photo Size: 
    /// - Each image's size is validated. If any image exceeds the maximum allowed size, an exception is thrown.
    /// </description>
    /// </item>
    /// <item>
    /// <description>
    /// **Create Advertisement**: 
    /// - A new advertisement entity is created based on the request data.
    /// - This entity is then saved to the database.
    /// </description>
    /// </item>
    /// <item>
    /// <description>
    /// **Generate Unique Image Names**: 
    /// - For each image, a unique name is generated by combining the advertisement ID with an image counter (`LastUploadImgCnt`).
    /// - This ensures the uniqueness of image names across all advertisements, and guarantees future updates to images maintain unique names.
    /// </description>
    /// </item>
    /// <item>
    /// <description>
    /// **Upload Images to BunnyCDN**: 
    /// - Each image is uploaded to BunnyCDN using the generated unique name.
    /// - The URL of the uploaded image is then stored in the advertisementâ€™s image URLs collection.
    /// </description>
    /// </item>
    /// <item>
    /// <description>
    /// **Update Advertisement**: 
    /// - After successfully uploading all images, the advertisement's record is updated in the database to reflect the new image URLs.
    /// </description>
    /// </item>
    /// </list>
    /// </remarks>
    public async Task<int> Handle(CreateAdvertisementCommand request, CancellationToken cancellationToken)
    {
        logger.LogInformation(@"Creating advertisement with name {ad}", request.AdvertisementName);

        var currentUser = userContext.GetCurrentUser();
        if (currentUser == null || !currentUser.HasRole(UserRoles.Admin))
        {
            logger.LogWarning("Unauthorized attempt to add advertisement by user: {UserId}", currentUser?.Id);
            throw new ForBidenException("Don't have the permission to add advertisement .");
        }
        CheckPhotosSize(ref request);
        
        var newAd = mapper.Map<Domain.Entities.Advertisement>(request);

        await adRepository.CreateAdvertisementAsync(newAd);

        var bunny = new BunnyClient(configuration);

        foreach (var img in request.Images)
        {
            var newImageName = $"{newAd.AdvertisementId}_{newAd.LastUploadImgCnt}.jpeg";
            newAd.LastUploadImgCnt++;  // Increment image count for uniqueness

            // Upload the image to BunnyCDN
            var response = await bunny.UploadFileAsync(img, newImageName, Global.AdvertisementFolderName);
            
            if (!response.IsSuccessful || response.Url == null)
            {
logger.LogWarning(@"Could not upload advertisement {ad} error msg :{mg}", 
    request.AdvertisementName,response.Message ?? "");
                continue;
            }

            newAd.AdvertisementImageUrls.Add(new AdvertisementImageUrl()
            {
                ImageUrl = response.Url,
                Advertisement = newAd
            });
        }

        if (!newAd.AdvertisementImageUrls.Any())
            newAd.IsActive = false;
        await adRepository.UpdateAdvertisementAsync(newAd);

        return newAd.AdvertisementId;
    }

    /// <summary>
    /// Checks the size of the photos to ensure they do not exceed the allowed limit.
    /// </summary>
    /// <param name="request">The request containing the images to check.</param>
    /// <exception cref="Exception">Throws an exception if any image exceeds the allowed size limit.</exception>
    private void CheckPhotosSize(ref CreateAdvertisementCommand request)
    {
        foreach (var img in request.Images)
        {
            var imgSizeInMb = img.Length / (1 << 20);
            if (imgSizeInMb > Global.AdvertisementImgSize)
            {
                logger.LogWarning($"try to upload img with size {imgSizeInMb} ");
                throw new Exception($"Image size cannot be greater than {Global.AdvertisementImgSize} MB");
            }
        }
    }
}
