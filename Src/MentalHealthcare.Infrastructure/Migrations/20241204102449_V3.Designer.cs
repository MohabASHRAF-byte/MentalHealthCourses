// <auto-generated />
using System;
using System.ComponentModel.DataAnnotations;
using MentalHealthcare.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MentalHealthcare.Infrastructure.Migrations
{
    [DbContext(typeof(MentalHealthDbContext))]
    [Migration("20241204102449_V3")]
    partial class V3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryCourse", b =>
                {
                    b.Property<int>("CategoriesCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("CoursesCourseId")
                        .HasColumnType("integer");

                    b.HasKey("CategoriesCategoryId", "CoursesCourseId");

                    b.HasIndex("CoursesCourseId");

                    b.ToTable("CategoryCourse");
                });

            modelBuilder.Entity("CourseSystemUser", b =>
                {
                    b.Property<int>("CourseRatesCourseId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersRatesSystemUserId")
                        .HasColumnType("integer");

                    b.HasKey("CourseRatesCourseId", "UsersRatesSystemUserId");

                    b.HasIndex("UsersRatesSystemUserId");

                    b.ToTable("CourseSystemUser");
                });

            modelBuilder.Entity("CourseSystemUser1", b =>
                {
                    b.Property<int>("FavCoursesCourseId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersFavCourseSystemUserId")
                        .HasColumnType("integer");

                    b.HasKey("FavCoursesCourseId", "UsersFavCourseSystemUserId");

                    b.HasIndex("UsersFavCourseSystemUserId");

                    b.ToTable("CourseSystemUser1");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdminId"));

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Advertisement", b =>
                {
                    b.Property<int>("AdvertisementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdvertisementId"));

                    b.Property<string>("AdvertisementDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("AdvertisementName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("LastUploadImgCnt")
                        .HasColumnType("integer");

                    b.HasKey("AdvertisementId");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.AdvertisementImageUrl", b =>
                {
                    b.Property<int>("AdvertisementImageUrlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdvertisementImageUrlId"));

                    b.Property<int>("AdvertisementId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("AdvertisementImageUrlId");

                    b.HasIndex("AdvertisementId");

                    b.ToTable("AdvertisementImageUrls");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("integer")
                        .HasAnnotation("SqlServer:IdentityIncrement", 10)
                        .HasAnnotation("SqlServer:IdentitySeed", 10L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()")
                        .HasAnnotation("DataType", DataType.DateTime);

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("DataType", DataType.Text);

                    b.Property<int>("UploadedById")
                        .HasColumnType("integer");

                    b.HasKey("ArticleId");

                    b.HasIndex("UploadedById");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("SqlServer:IdentityIncrement", 2)
                        .HasAnnotation("SqlServer:IdentitySeed", 10L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<int>("AddedByAdminId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("AuthorId");

                    b.HasIndex("AddedByAdminId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.ContactUsForm", b =>
                {
                    b.Property<int>("ContactUsFormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContactUsFormId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("ContactUsFormId");

                    b.ToTable("ContactUses");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CollectionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EnrollmentsCount")
                        .HasColumnType("integer");

                    b.Property<int>("InstructorId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("numeric");

                    b.Property<int>("ReviewsCount")
                        .HasColumnType("integer");

                    b.Property<string>("ThumbnailName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("CourseId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.CourseLesson", b =>
                {
                    b.Property<int>("CourseLessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CourseLessonId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("integer");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("CourseLessonId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseSectionId");

                    b.ToTable("CourseLessons");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.CourseMateriel", b =>
                {
                    b.Property<int>("CourseMaterielId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CourseMaterielId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int?>("CourseLessonId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsVideo")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("CourseMaterielId");

                    b.HasIndex("AdminId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseLessonId");

                    b.HasIndex("CourseSectionId");

                    b.ToTable("CourseMateriels");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.CourseSection", b =>
                {
                    b.Property<int>("CourseSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CourseSectionId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("CourseSectionId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseSections");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.EnrollmentDetails", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EnrollmentId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Progress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("SystemUserId")
                        .HasColumnType("integer");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SystemUserId");

                    b.ToTable("EnrollmentDetails");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.HelpCenterItem", b =>
                {
                    b.Property<int>("HelpCenterItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HelpCenterItemId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("HelpCenterItemId");

                    b.ToTable("HelpCenterItems");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InstructorId"));

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<int>("AddedByAdminId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("InstructorId");

                    b.HasIndex("AddedByAdminId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Logs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SystemUserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("userId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SystemUserId");

                    b.HasIndex("userId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Meditation", b =>
                {
                    b.Property<int>("MeditationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("SqlServer:IdentityIncrement", 10)
                        .HasAnnotation("SqlServer:IdentitySeed", 110L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MeditationId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()")
                        .HasAnnotation("DataType", DataType.DateTime);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("DataType", DataType.Text);

                    b.Property<int>("UploadedById")
                        .HasColumnType("integer");

                    b.HasKey("MeditationId");

                    b.HasIndex("UploadedById");

                    b.ToTable("Meditations");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Payments", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<long>("Card_Number")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SystemUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("Year")
                        .HasColumnType("date");

                    b.Property<DateTime>("month")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("usersId")
                        .HasColumnType("text");

                    b.HasKey("PaymentId");

                    b.HasIndex("SystemUserId");

                    b.HasIndex("usersId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.PendingAdmins", b =>
                {
                    b.Property<int>("PendingAdminsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PendingAdminsId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("PendingAdminsId");

                    b.HasIndex("AdminId");

                    b.ToTable("PendingAdmins");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.PendingVideoUpload", b =>
                {
                    b.Property<string>("PendingVideoUploadId")
                        .HasColumnType("text");

                    b.Property<int>("AdminId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseLessonId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PendingVideoUploadId");

                    b.HasIndex("CourseLessonId");

                    b.HasIndex("CourseSectionId");

                    b.ToTable("VideoUploads");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.PodCaster", b =>
                {
                    b.Property<int>("PodCasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 100L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PodCasterId"));

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<int>("AddedByAdminId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("PodCasterId");

                    b.HasIndex("AddedByAdminId");

                    b.ToTable("PodCasters");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Podcast", b =>
                {
                    b.Property<int>("PodcastId")
                        .HasColumnType("integer")
                        .HasAnnotation("SqlServer:IdentityIncrement", 20)
                        .HasAnnotation("SqlServer:IdentitySeed", 100L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()")
                        .HasAnnotation("DataType", DataType.DateTime);

                    b.Property<int>("PodCasterId")
                        .HasColumnType("integer");

                    b.Property<string>("PodcastDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("PodcastLength")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("DataType", DataType.Text);

                    b.Property<int>("UploadedById")
                        .HasColumnType("integer");

                    b.HasKey("PodcastId");

                    b.HasIndex("UploadedById");

                    b.ToTable("Podcasts");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.SystemUser", b =>
                {
                    b.Property<int>("SystemUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1L)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SystemUserId"));

                    b.Property<DateTime>("Dof")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SystemUserId");

                    b.HasIndex("UserId");

                    b.ToTable("SystemUsers");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.SystemUserTokenCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SystemUserTokenCodes");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<long>("Roles")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Tenant")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("UserName");

                    b.HasIndex("Email", "Tenant")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail", "Tenant")
                        .IsUnique();

                    b.HasIndex("NormalizedUserName", "Tenant")
                        .IsUnique();

                    b.HasIndex("UserName", "Tenant")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CategoryCourse", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthcare.Domain.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseSystemUser", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseRatesCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthcare.Domain.Entities.SystemUser", null)
                        .WithMany()
                        .HasForeignKey("UsersRatesSystemUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseSystemUser1", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("FavCoursesCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthcare.Domain.Entities.SystemUser", null)
                        .WithMany()
                        .HasForeignKey("UsersFavCourseSystemUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Admin", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.AdvertisementImageUrl", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.Advertisement", "Advertisement")
                        .WithMany("AdvertisementImageUrls")
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertisement");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Article", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.Author", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthcare.Domain.Entities.Admin", "UploadedBy")
                        .WithMany("Articles")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Author", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.Admin", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedByAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedBy");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Course", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.Instructor", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.CourseLesson", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthcare.Domain.Entities.CourseSection", "CourseSection")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CourseSection");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.CourseMateriel", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.Admin", "Admin")
                        .WithMany("CourseMateriels")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthcare.Domain.Entities.Course", "Course")
                        .WithMany("CourseMateriels")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthcare.Domain.Entities.CourseLesson", null)
                        .WithMany("CourseMateriels")
                        .HasForeignKey("CourseLessonId");

                    b.HasOne("MentalHealthcare.Domain.Entities.CourseSection", "CourseSection")
                        .WithMany()
                        .HasForeignKey("CourseSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Course");

                    b.Navigation("CourseSection");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.CourseSection", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.Course", "Course")
                        .WithMany("CourseSections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.EnrollmentDetails", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthcare.Domain.Entities.SystemUser", "SystemUser")
                        .WithMany()
                        .HasForeignKey("SystemUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Instructor", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.Admin", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedByAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedBy");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Logs", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.SystemUser", null)
                        .WithMany("Logs")
                        .HasForeignKey("SystemUserId");

                    b.HasOne("MentalHealthcare.Domain.Entities.User", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Meditation", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.Admin", "UploadedBy")
                        .WithMany("Meditations")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Payments", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.SystemUser", null)
                        .WithMany("Payments")
                        .HasForeignKey("SystemUserId");

                    b.HasOne("MentalHealthcare.Domain.Entities.User", "users")
                        .WithMany()
                        .HasForeignKey("usersId");

                    b.Navigation("users");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.PendingAdmins", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.PendingVideoUpload", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.CourseLesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("CourseLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthcare.Domain.Entities.CourseSection", "Section")
                        .WithMany()
                        .HasForeignKey("CourseSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.PodCaster", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.Admin", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedByAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedBy");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Podcast", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.PodCaster", "PodCaster")
                        .WithMany("Podcasts")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthcare.Domain.Entities.Admin", "UploadedBy")
                        .WithMany("Podcasts")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PodCaster");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.SystemUser", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.SystemUserTokenCode", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthcare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MentalHealthcare.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Admin", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("CourseMateriels");

                    b.Navigation("Meditations");

                    b.Navigation("Podcasts");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Advertisement", b =>
                {
                    b.Navigation("AdvertisementImageUrls");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Author", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Course", b =>
                {
                    b.Navigation("CourseMateriels");

                    b.Navigation("CourseSections");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.CourseLesson", b =>
                {
                    b.Navigation("CourseMateriels");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.CourseSection", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.Instructor", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.PodCaster", b =>
                {
                    b.Navigation("Podcasts");
                });

            modelBuilder.Entity("MentalHealthcare.Domain.Entities.SystemUser", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
